version: '2'

# Go task : https://taskfile.org

vars:
  AWS_REGION:
    sh:  aws configure get region
  AWS_ACCOUNT_ID:
    sh: aws sts get-caller-identity --output text --query 'Account'

tasks:
  static-cfn-deploy:
    desc: deploy S3 bucket
    cmds:
        - aws cloudformation deploy --template-file {{.STATIC_TEMPLATE}} --capabilities CAPABILITY_IAM --stack-name {{.STATIC_STACK_NAME}}

  static-deploy:
    desc: deploy static website
    cmds: 
        - aws s3 sync ./static/ s3://{{.STATIC_S3_BUCKET}}
    vars:
      STATIC_S3_BUCKET:
        sh: aws cloudformation describe-stacks --stack-name {{.STATIC_STACK_NAME}} --query 'Stacks[0].Outputs[?OutputKey==`S3Bucket`].OutputValue' --output text
  
  api-docker-local:
      desc: Docker compose up
      cmds:
        - docker-compose -f app/docker-compose.yml up
      env:
        TABLE_NAME: '{{.DDB_TABLE}}'
        AWS_REGION: '{{.AWS_REGION}}'
  
  api-ecr-push:
      desc: push container to Amazon ECR registry
      cmds:
        - $(aws ecr get-login --no-include-email --region {{.AWS_REGION}})
        - docker build -t {{.API_STACK_NAME}} app/
        - docker tag {{.API_STACK_NAME}}:latest {{.AWS_ACCOUNT_ID}}.dkr.ecr.{{.AWS_REGION}}.amazonaws.com/{{.API_STACK_NAME}}:latest
        - docker push 862440218923.dkr.ecr.{{.AWS_REGION}}.amazonaws.com/{{.API_STACK_NAME}}:latest
  
  api-mu-env-deploy:
      desc: create ecs fargate env with mu
      cmds:
        - mu --config app/mu.yml environment upsert acceptance
  
  api-mu-service-deploy:
      desc: deploy ecs fargate service with mu
      cmds:
        - mu --config app/mu.yml service push 
        - mu --config app/mu.yml service deploy acceptance
        - mu --config app/mu.yml environment show acceptance
  
  api-sam-validate:
    desc: Validate Cloudformation syntax
    cmds:
      - aws cloudformation validate-template --template-body file://{{.API_TEMPLATE}}

  api-sam-package:
    desc: transform and package cloudfomartion template to Amazon S3
    deps: []
    cmds:
      - aws cloudformation package --s3-bucket {{.S3_BUCKET}} --template {{.API_TEMPLATE}} --output-template-file build/packaged.yml
  
  api-sam-local:
    desc: Run local api
    cmds:
      - sam local start-api --template {{.API_TEMPLATE}}
    env:
      TABLE_NAME: '{{.DDB_TABLE}}'
  
  api-sam-local-invoke:
    desc: Invoke local Lambda
    cmds:
      - sam local invoke "HelloWorldGet" --template {{.API_TEMPLATE}} --event sam-local-invoke-event.json
    env:
      TABLE_NAME: '{{.DDB_TABLE}}'

  api-sam-test:
    desc: http get Api deployed
    cmds:
      - http {{.API_URL}} --json
      - http POST {{.API_URL}}/bob --json
      - http GET {{.API_URL}}/bob --json
    vars:
      API_URL:
        sh: aws cloudformation describe-stacks --stack-name {{.API_STACK_NAME}} --query 'Stacks[0].Outputs[?OutputKey==`ApigwURL`].OutputValue' --output text
  
  api-sam-deploy:
    desc: Deploy cloudformation template
    deps: [api-cfn-package,api-cfn-validate]
    cmds:
      - aws cloudformation deploy --s3-bucket {{.S3_BUCKET}} --template-file build/packaged.yml --capabilities CAPABILITY_IAM --stack-name {{.API_STACK_NAME}}

  api-sam-loadtest:
    desc: load test the API
    cmds:
    - locust -f loadtest/locustfile.py --host={{.API_URL}} --clients=200 --hatch-rate=10 --no-web --run-time 5m